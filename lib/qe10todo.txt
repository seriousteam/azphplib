FORNOW1
1) Сериализуемый набор where (Parts.where), состоящий из набора сериализуемых операций (выражение в конъюктивно-дизьюнктивной форме)
	а) Написаны операции:
		Унарные =, >=, >, <=, <, is null, is not null
		Унарные выражения begins, contains
		Операция subquery, которая является выражением вида EXISTS(SELECT 1 FROM T WHERE brel.join AND ...) - это обратная связь
TODO:
- between - X<поле AND поле<Y
		
	б) Написаны поля
		Простые - поле текущей таблицы, поле по связям rel.rel.field (порождает OUTER JOIN таблиц)
		Merge-поля - поле, которое является результатом фильтрованного до одной записи подселекта. В свою очередь это merge-поле содержит выбранное поле, которое бывает как простым, так и merge-полем
TODO:
- нужны подобные where конструкторы для order by, group by, limit, page

- придумать, как в описании таблицы будет выглядеть фильтрующее условие для merge-поля
		TABLE
			field VARCHAR @othertable MERGE:'a.date=? and a.field=?' PARAMS:'2014,User friendly'
Условие из описания должен парсить фильтр и отображать его как то, что он умеет парсить и отображать? Если да, то надо поправить парсер фильтра, потому что он использует служебные комментарии /*S*/ /*B*/ и т.п. и зачастую жестко привязан к пробелам


2) Написан контроллер ( Controller ) рисования выражения
	а) Каждая операция дополнена методом draw и прочими вспомогателньыми методами, позволяющими отрисовать их в контроллере.
	б) Каждая операция отображается в контроллере частями:
		- кэпшен поля 
			для релейшена это длинный кэпшен в виде расшифровки пути - a.rel1.rel2.name - Имя(им.п.) рела(род.п.) рела(род.п.)
			для обратной связи формируется группа с подвыражением
		- выбранное значение, если есть
		- контрол выбора операции - для замены текущей на новую
		- контрол выбора значения - для замены текущего значения на новое, или дополнение старого
	в) Для каждой операции в зависимости от её поля выбирается нужный контрол, который
		- умеет себя рисовать (draw)
		- умеет проставлять выбранное значение в операцию (onchoose)
		- умеет форматировать значение, пришедшее из базы, в дружелюбное для пользователя (formattext)
		- умеет выводить своё значение (text)
TODO:
- для активных операций(который загружают свои данные дополнительным запросом) нужно сделать переводилку (formattext) выбранных значений( например relation ) в table.ID. Например на сервере скриптик ider.php, который по имени таблички и фильтру *WHERE.... выдает json массив или строку, содержащую table.ID из описания. Этот скриптик вызвать в formattext.

- придумать, как кастомизировать контролы для merge-полей. Например
	Кэпшен поля (при Год:2014 и Field: Other value ): значение

- оптимизировать заголовки путей так, чтобы путь вида "Название города страны континента: " выводилось бы "Город: ". Это можно осуществить проставлением каких-то свойств в релейшен в табличке.

3) Навигатор выбора полей для выражений
	У навигатора два представления структуры - дерево и монорегион. Дерево состоит из регионов, подобных монорегиону.
	а) Монорегион позволяет собирать любой путь.
	Отображение узлов в монорегионе
		- все обычные поля таблицы - это выбираемые узлы
		- одношаговые прямые связи - переводят монорегион на отображение таблицы по связи
		- одношаговые обратные связи - переводят монорегион на отображение таблицы по обратной связи
		- узлы навигации монорегиона - переводят монорегион на один из предыдущих шагов навигации

	б) Дерево сформированно относительно корневой таблицы и состоит из связанных регионов, которые соответствуют обратным(как прямо, так и косвенно) связям данной таблицы. 
		- Определяющая характеристика путей всех узлов дерева и узлов его регионов является их уникальность, т.е. эти пути не содержат в себе повторяющихся звеньев. Таким образом дерево позволяет обозревать всю связанную с корневой таблицей структуру таблиц и формировать уникальные пути - пути, которые, по предположению, наиболее понятны простому человеку.
		- Таблицы, которые являются словарями, делать тупиковыми, т.е. не нужно исследовать обратные связи на словари, потому что это слабо касается смысла корневой таблицы. 
	Отображение регионов в дереве:
		- корневой регион, соответствует корневой таблице
		- регионы, таблицы которых имеют уникальный путь к корневой таблице
		- связи между регионами, которые показывают взаимное расположение регионов в уникальном пути к корневой таблице
	Отображение узлов в выбранном регионе:
		- все поля таблицы
		- все прямые связи, а также прямые связи по этим связям и т.д. - переводят выбранный регион на отображение полей и прямых связей таблицы по связи
		- узлы навигации региона - переводят регион на один из предыдущих шагов навигации.
	в) Отображение для всех регионов:
		- узлы прымых связей одного направления связи (типа rel1.field, rel1.rel2.field направление - это rel1) должны быть одного цвета
		- узлы прымых связей, ссылающихся на одну и ту же таблицу, должны быть одного цвета
		- узлы обратных связей все одного цвета
		- узел корневой таблицы - особый цвет
		
		TODO: в описании таблицы нужен флажок для видимости-невидимости
		TODO: все невидимые поля - положить в специальный раскрываемый контейнер
		TODO: добавить узел для выбора самого поля "связь". Например с текстом '@'
	
	г) Функциональность:
	- При нажатии на узел навигатора создается операция без значения в построителе выражений. При этом учитывается контекст выбора, который даёт построитель: в какой подзапрос добавляется, какой операцией соединяется (и, или)
		- если никто не активен - добавляется в корневое выражение новый сектор "или" и туда добавляется новое выржаение
		- если активен любой сектор "или" - выражение добавляется туда
		- если активен любой подзапрос - в него добавляется новый сектор "или" и туда добавляется новое выражение
	- Навигатор учитывает контекст выбора построителя выражений		
		- Текущее выражение определяет навигационные возможности, а не наоборот
		- Навигатор ничего не может сделать с текущим выражением, кроме как сделать текущим только что добавленное
		- Ограничением навигации является путь до текущего подзапроса. Если формируемый путь меньше, чем путь до текущего подзапроса, то навигация производиться не будет. То есть обратная навигация, которая возможна лишь при хождении по истории
	- Узлы с путями, не подходящими к выбранному выражению, помечены как неактивные.
	
TODO
4) Выбор полей сортировки

TODO
5) Управление фильтром
	- кнопка "применить"
	- кнопка "отмена"